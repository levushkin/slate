# Начало работы

## Регистрация

Для того, чтобы начать использовать API Сервиса, необходимо получить Авторизационные данные. Для их получения выполните следующие действия:

1. Зарегистрируйтесь в Сервисе:
  1. Зайдите в ЛК.
  1. Нажмите «Получить доступ».
  1. Заполните все поля появившейся формы.
  1. Нажмите «Получить доступ».
  1. Далее следуйте подсказкам на экране.
1. Примите оферту:
  1. Войдите в личный кабинет.
  1. Откройте пункт меню «API».
  1. Выполните инструкцию по принятию оферты.

В результате мы сформируем для вас Авторизационные данные. О том, что Авторизационные данные сформированы, мы уведомим вас по телефону или e-mail, которые были указаны при регистрации. Т.к. процесс валидации учётной записи и формирования Авторизационных данных для неё может занять некоторое время, мы обеспечили возможность тестирования интеграции с сервисом до завершения валидации учётной записи. 
<aside class="warning">
Не забыть дать ссылку на раздел с подключением к тестовому контуру.
</aside>

## Регламент взаимодействия

Взаимодействие (синхронное) происходит по протоколу API посредством вызова методов веб-сервиса:

1. Endpoint: `https://api.metaship.ru/v1/`
1. По протоколу HTTPS одним из доступных методов: `GET, POST, PUT, DELETE`
1. Кодировка запросов и ответов: `UTF-8`
1. Тип контента: `application/json`

Описание процесса взаимодействия:

1. Клиент вызывает один из доступных методов Сервиса:
  1. Действия с заказами:
      1. POST /v1/orders
      1. GET /v1/orders/{id}
      1. PUT /v1/orders/{id}
      1. DELETE /v1/orders/{id}
      1. GET /v1/orders/{id}/labels
      1. GET /v1/orders/{id}/statuses
  1. Действия с офферами: GET /v1/offers
  1. Действия с партиями:
      1. POST /v1/parcels
      1. GET /v1/parcels/{id}/acceptance
  1. Прочие действия:
      1. GET /v1/pickuppoints
      1. GET /v1/deliveries
      1. GET /v1/services
      1. GET /v1/statuses
      1. GET /v1/vats
      1. GET /v1/shops
      1. GET /v1/warehouses
1. Сервис осуществляет авторизацию Клиента и валидацию запроса, после чего осуществляет обработку запроса.
1. Сервис синхронно отвечает Клиенту.

<aside class="notice">
В описании API приводится существенно больше методов. Просим игнорировать их наличие, т.к. они добавлены для целей обратной совместимости или созданы под конкретные задачи и клиентов
</aside>


Каждый вызов Сервиса сопровождается передачей значений параметров в заголовке запроса:

1. ContentType: `application/json`
1. Authorization: [подпись запроса](#podpis-zaprosa).

## Подпись запроса

Подпись запроса необходима для обеспечения безопасности операций, выполняемых посредством API. При формировании подписи запроса используются:

1. Тело запроса.
1. Метод запроса.
1. URL-кодированная строка запроса.
1. Текущие дата и время.
1. Авторизационные данные. Для их получения следуйте [инструкции](#registratsiia).

### Описание алгоритма

Подпись запроса формируется по алгоритму:

1. В одну строку с пробелом в качестве разделителя объединяются следующие значения (порядок имеет значение):
  1. Метод запроса.
  1. slug запроса.
  1. URL-кодированная строка запроса декодируется. Если строка отсутствует, то на этом этапе формируется пустая строка.
  1. Текущие дата и время преобразуются в строку в формате `Y-m-d\TH:i:s`. Пример: `2020-05-12T13:38:44`.
  1. По алгоритму sha256 вычисляется hash-сумма от тела запроса.
1. По алгоритму sha256 вычисляется hash-сумма от строки, полученной на предыдущем этапе.
1. На основе ключа вычисляется hash-сумма по алгоритму sha256 от строки, полученной на предыдущем шаге. В качестве ключа используется секретный код, полученный на этапе [регистрации](#registratsiia).
1. В одну строку с запятой и пробелом («, ») в качестве разделителя объединяются следующие значения (порядок имеет значение):
  1. Константа: `HMAC-SHA256`.
  1. Строка, полученная на шаге 1.4 настоящего алгоритма.
  1. Токен, полученный на этапе [регистрации](#registratsiia).
  1. Строка, полученная на шаге 3 настоящего алгоритма.

### Пример реализации

> Пример реализации алгоритма

```php
<?php
$method = 'GET';
$slug = '/v1/statuses';
$params = null;
$datetime = '2020-06-04T10:45:35';
$body = null;
$token = 'token';
$secret = 'secret';
 
$params = $params ? urldecode($params) : '';
$body = hash('sha256', $body);
 
$step1 = implode(' ',
        [
            $method,
            $slug,
            $params,
            $datetime,
            $body
        ]
    );
 
$step2 = hash('sha256', $step1);
$step3 = hash_hmac('sha256', $step2, $secret);
$step4 = sprintf(
        '%s, %s, %s, %s',
        'HMAC-SHA256',
        $datetime,
        $token,
        $step3
    );
 
echo sprintf(
    "1.1. %s\n1.2. %s\n1.3. %s\n1.4. %s\n1.5. %s\n1. %s\n2. %s\n3. %s\n4. %s\n",
    $method, $slug, $params, $datetime, $body, $step1,
    $step2, $step3, $step4
);
```

Пусть необходимо сформировать подпись запроса для получения списка статусов заказов:

1. Запрос `GET /v1/statuses`
1. Запрос выполняется в `2020-06-04 10:45:35`
1. Токен: `token`
1. Секретный код: `secret`

Для такого запроса подпись будет сформирована следующим образом:

1. Итоговая строка: `GET /v1/statuses  2020-06-04T10:45:35 e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855`
  1. Метод: `GET`
  1. Slug: `/v1/statuses`
  1. URL-кодированная строка запроса: отсутствует, поэтому берётся пустая строка
  1. Дата и время: `2020-06-04T10:45:35`
  1. Hash-сумма от тела запроса (отсутствует, поэтому считаем hash от пустой строки): `e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855`
1. Hash-сумма от строки на шаге 1: `83783d03eaf62acaead5f7f43e031dce9a176401da25385f29e9f1817c8cf6ba`
1. Hash-сумма от строки на шаге 2 с токеном в качестве ключа: `07774802d4131659c75563aac4cfcb05bd03e6e483274427ab157f50e88d1d37`
1. Подпись запроса: `HMAC-SHA256, 2020-06-04T10:45:35, token, 07774802d4131659c75563aac4cfcb05bd03e6e483274427ab157f50e88d1d37`